// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: package.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPackageByName = `-- name: GetPackageByName :one
SELECT
    name,
    summary,
    latest_version,
    created_at,
    last_uploaded_at,
    updated_at
FROM
    package
WHERE
    name = $1
`

func (q *Queries) GetPackageByName(ctx context.Context, name string) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageByName, name)
	var i Package
	err := row.Scan(
		&i.Name,
		&i.Summary,
		&i.LatestVersion,
		&i.CreatedAt,
		&i.LastUploadedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPackagesSimple = `-- name: ListPackagesSimple :many
SELECT
    name
FROM
    package
`

func (q *Queries) ListPackagesSimple(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listPackagesSimple)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReleasesByPackageNameSimple = `-- name: ListReleasesByPackageNameSimple :many
SELECT
    version,
    file_name,
    file_type,
    md5_digest,
    sha256_digest,
    blake2_256_digest,
    requires_python
FROM
    release
WHERE
    package_name = $1
ORDER BY
    created_at DESC
`

type ListReleasesByPackageNameSimpleRow struct {
	Version         string
	FileName        pgtype.Text
	FileType        pgtype.Text
	Md5Digest       pgtype.Text
	Sha256Digest    pgtype.Text
	Blake2256Digest pgtype.Text
	RequiresPython  pgtype.Text
}

func (q *Queries) ListReleasesByPackageNameSimple(ctx context.Context, packageName pgtype.Text) ([]ListReleasesByPackageNameSimpleRow, error) {
	rows, err := q.db.Query(ctx, listReleasesByPackageNameSimple, packageName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListReleasesByPackageNameSimpleRow
	for rows.Next() {
		var i ListReleasesByPackageNameSimpleRow
		if err := rows.Scan(
			&i.Version,
			&i.FileName,
			&i.FileType,
			&i.Md5Digest,
			&i.Sha256Digest,
			&i.Blake2256Digest,
			&i.RequiresPython,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
