// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source=store.go -destination=./store_mock.go -package=db Store
//

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close), ctx)
}

// CreateRelease mocks base method.
func (m *MockStore) CreateRelease(ctx context.Context, arg CreateReleaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockStoreMockRecorder) CreateRelease(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockStore)(nil).CreateRelease), ctx, arg)
}

// GetPackageByName mocks base method.
func (m *MockStore) GetPackageByName(ctx context.Context, packageName string) (*Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageByName", ctx, packageName)
	ret0, _ := ret[0].(*Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageByName indicates an expected call of GetPackageByName.
func (mr *MockStoreMockRecorder) GetPackageByName(ctx, packageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageByName", reflect.TypeOf((*MockStore)(nil).GetPackageByName), ctx, packageName)
}

// GetRelease mocks base method.
func (m *MockStore) GetRelease(ctx context.Context, packageName, version string) (*GetReleaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", ctx, packageName, version)
	ret0, _ := ret[0].(*GetReleaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockStoreMockRecorder) GetRelease(ctx, packageName, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockStore)(nil).GetRelease), ctx, packageName, version)
}

// GetReleaseFile mocks base method.
func (m *MockStore) GetReleaseFile(ctx context.Context, packageName, fileName string) (*GetReleaseFileByNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseFile", ctx, packageName, fileName)
	ret0, _ := ret[0].(*GetReleaseFileByNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseFile indicates an expected call of GetReleaseFile.
func (mr *MockStoreMockRecorder) GetReleaseFile(ctx, packageName, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseFile", reflect.TypeOf((*MockStore)(nil).GetReleaseFile), ctx, packageName, fileName)
}

// ListPackages mocks base method.
func (m *MockStore) ListPackages(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockStoreMockRecorder) ListPackages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockStore)(nil).ListPackages), ctx)
}

// ListReleaseFiles mocks base method.
func (m *MockStore) ListReleaseFiles(ctx context.Context, packageName string) ([]ListReleasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseFiles", ctx, packageName)
	ret0, _ := ret[0].([]ListReleasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleaseFiles indicates an expected call of ListReleaseFiles.
func (mr *MockStoreMockRecorder) ListReleaseFiles(ctx, packageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseFiles", reflect.TypeOf((*MockStore)(nil).ListReleaseFiles), ctx, packageName)
}

// Migrate mocks base method.
func (m *MockStore) Migrate(ctx context.Context, migrationQueryPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, migrationQueryPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockStoreMockRecorder) Migrate(ctx, migrationQueryPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockStore)(nil).Migrate), ctx, migrationQueryPath)
}
