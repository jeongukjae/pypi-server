// Code generated by MockGen. DO NOT EDIT.
// Source: index.go
//
// Generated by this command:
//
//	mockgen -source=index.go -destination=./index_mock.go -package=packageindex Index
//

// Package packageindex is a generated GoMock package.
package packageindex

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
	isgomock struct{}
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockIndex) DownloadFile(ctx context.Context, packageName, fileName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, packageName, fileName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockIndexMockRecorder) DownloadFile(ctx, packageName, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockIndex)(nil).DownloadFile), ctx, packageName, fileName)
}

// ListPackageFiles mocks base method.
func (m *MockIndex) ListPackageFiles(ctx context.Context, packageName string) ([]PackageFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackageFiles", ctx, packageName)
	ret0, _ := ret[0].([]PackageFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackageFiles indicates an expected call of ListPackageFiles.
func (mr *MockIndexMockRecorder) ListPackageFiles(ctx, packageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageFiles", reflect.TypeOf((*MockIndex)(nil).ListPackageFiles), ctx, packageName)
}

// ListPackages mocks base method.
func (m *MockIndex) ListPackages(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPackages", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages.
func (mr *MockIndexMockRecorder) ListPackages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockIndex)(nil).ListPackages), ctx)
}

// UploadFile mocks base method.
func (m *MockIndex) UploadFile(ctx context.Context, req UploadFileRequest, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, req, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIndexMockRecorder) UploadFile(ctx, req, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIndex)(nil).UploadFile), ctx, req, content)
}
